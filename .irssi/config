servers = (
  {
    address = "glacicle.com";
    chatnet = "freenode";
    port = "3330";
    autoconnect = "yes";
    nick = "GGLucas";
  },
  {
    address = "glacicle.com";
    chatnet = "oftc";
    port = "3331";
    autoconnect = "yes";
    nick = "GGLucas";
  },
  {
    address = "glacicle.com";
    chatnet = "foonetic";
    port = "3332";
    autoconnect = "yes";
    nick = "GGLucas";
  },
  {
    address = "glacicle.com";
    chatnet = "rizon";
    port = "3333";
    autoconnect = "yes";
    nick = "GGLucas";
  },
  {
    address = "freenode";
    port = "0";
    password = "3330";
    use_ssl = "no";
    ssl_verify = "no";
    autoconnect = "yes";
  }
);

chatnets = {
  freenode = { type = "IRC"; };
  oftc = { type = "IRC"; };
  foonetic = { type = "IRC"; };
  rizon = { type = "IRC"; };
};

aliases = {
  J = "join";
  WJOIN = "join -window";
  WQUERY = "query -window";
  LEAVE = "part";
  BYE = "quit";
  EXIT = "quit";
  SIGNOFF = "quit";
  DESCRIBE = "action";
  DATE = "time";
  HOST = "userhost";
  LAST = "lastlog";
  SAY = "msg *";
  WI = "whois";
  WII = "whois $0 $0";
  WW = "whowas";
  N = "names";
  M = "msg";
  T = "topic";
  C = "clear";
  CL = "clear";
  K = "kick";
  KB = "kickban";
  KN = "knockout";
  BANS = "ban";
  B = "ban";
  MUB = "unban *";
  UB = "unban";
  IG = "ignore";
  UNIG = "unignore";
  SB = "scrollback";
  UMODE = "mode $N";
  WC = "window close";
  WN = "window new hide";
  SV = "say Irssi $J ($V) - http://irssi.org/";
  GOTO = "sb goto";
  CHAT = "dcc chat";
  RUN = "SCRIPT LOAD";
  SBAR = "STATUSBAR";
  INVITELIST = "mode $C +I";
  "/w" = "/win";
  w = "win";
};

statusbar = {
  # formats:
  # when using {templates}, the template is shown only if its argument isnt
  # empty unless no argument is given. for example {sb} is printed always,
  # but {sb $T} is printed only if $T isnt empty.

  items = {
    # start/end text in statusbars
    barstart = "{sbstart}";
    barend = "{sbend}";

    # treated "normally", you could change the time/user name to whatever
    time = "{sb $Z}";
    user = "{sb $cumode$N{sbmode $usermode}{sbaway $A}}";

    # treated specially .. window is printed with non-empty windows,
    # window_empty is printed with empty windows
    window = "{sb $winref:$T{sbmode $M}}";
    window_empty = "{sb $winref{sbservertag $tag}}";
    prompt = "{prompt $[.15]T}";
    prompt_empty = "{prompt $winname}";
    topic = " $topic";
    topic_empty = " Irssi v$J - http://irssi.org/help/";

    # all of these treated specially, theyre only displayed when needed
    lag = "{sb Lag: $0-}";
    act = "{sb Act: $0-}";
    more = "-- more --";
  };

  # theres two type of statusbars. root statusbars are either at the top
  # of the screen or at the bottom of the screen. window statusbars are at
  # the top/bottom of each split window in screen.
  default = {
    # the "default statusbar" to be displayed at the bottom of the window.
    # contains all the normal items.
    window = {
      disabled = "yes";

      # window, root
      type = "window";
      # top, bottom
      placement = "bottom";
      # number
      position = "1";
      # active, inactive, always
      visible = "active";

      # list of items in statusbar in the display order
      items = {
        barstart = { priority = "100"; };
        user = { };
        window = { };
        window_empty = { };
        lag = { priority = "-1"; };
        more = { priority = "-1"; alignment = "right"; };
        barend = { priority = "100"; alignment = "right"; };
      };
    };

    # statusbar to use in inactive split windows
    window_inact = {
      type = "window";
      placement = "bottom";
      position = "1";
      visible = "inactive";
      items = {
        barstart = { priority = "100"; };
        window = { };
        window_empty = { };
        more = { priority = "-1"; alignment = "right"; };
        barend = { priority = "100"; alignment = "right"; };
      };
    };

    # we treat input line as yet another statusbar :) Its possible to
    # add other items before or after the input line item.
    prompt = {
      type = "root";
      placement = "bottom";
      # we want to be at the bottom always
      position = "100";
      visible = "always";
      items = {
        prompt = { priority = "-1"; };
        prompt_empty = { priority = "-1"; };
        # treated specially, this is the real input line.
        input = { priority = "10"; };
      };
    };

    # topicbar
    topic = {
      type = "root";
      placement = "top";
      position = "1";
      visible = "always";
      items = {
        barstart = { priority = "100"; };
        topic = { };
        topic_empty = { };
        barend = { priority = "100"; alignment = "right"; };
      };
    };
    remove = { disabled = "yes"; };
    all = { disabled = "yes"; };
    awl_0 = {
      items = {
        barstart = { priority = "100"; };
        awl_0 = { };
        barend = { priority = "100"; alignment = "right"; };
      };
    };
  };
};
settings = {
  core = {
    real_name = "Lucas";
    user_name = "GGLucas";
    nick = "GGLucas";

  };
  "fe-common/core" = {
    autolog = "yes";
    autolog_path = "~/irclogs/$tag/$0-%m%y.log";
    show_nickmode_empty = "yes";
    theme = "default";
    show_names_on_join = "no";
  };
  "fe-text" = {
    colors = "yes";
    autostick_split_windows = "yes";
    actlist_sort = "refnum";
    indent_always = "yes";
  };
  "perl/core/scripts" = {
    awl_display_key = "$Q%K::%n$H$C$S ";
    neat_left_actions = "yes";
    neat_colors = "rRgGyYmMcC";
    notify_time = "3000";
    openurl_app_http = "fxs :0.2 '$1'";
    openurl_watch_mail = "no";
    neat_maxlength = "11";
  };
};
logs = { };
ignores = (
  { mask = "JOINS"; level = "PARTS QUITS NICKS"; },
  { level = "JOINS PARTS QUITS NICKS"; }
);
keyboard = (
  { key = "meta-1"; id = "change_window"; data = "1"; },
  { key = "meta-2"; id = "change_window"; data = "2"; },
  { key = "meta-3"; id = "change_window"; data = "3"; },
  { key = "meta-4"; id = "change_window"; data = "4"; },
  { key = "meta-5"; id = "change_window"; data = "5"; },
  { key = "meta-6"; id = "change_window"; data = "6"; },
  { key = "meta-7"; id = "change_window"; data = "7"; },
  { key = "meta-8"; id = "change_window"; data = "8"; },
  { key = "meta-9"; id = "change_window"; data = "9"; },
  { key = "meta-0"; id = "change_window"; data = "10"; },
  { key = "^F"; id = "scroll_forward"; data = ""; },
  { key = "meta-f"; id = "scroll_forward"; data = ""; },
  { key = "^B"; id = "scroll_backward"; data = ""; },
  { key = "meta-b"; id = "scroll_backward"; data = ""; },
  { key = "^H"; id = "key"; data = "left"; },
  { key = "^L"; id = "key"; data = "right"; },
  { key = "^X"; id = "key"; data = "delete"; },
  { key = "meta-x"; id = "next_window_item"; data = ""; },
  { key = "meta-c"; id = "erase_line"; data = ""; },
  { key = "meta-j"; id = "key"; data = "down"; },
  { key = "meta-k"; id = "key"; data = "up"; },
  { key = "meta-h"; id = "previous_window"; data = ""; },
  { key = "meta-l"; id = "next_window"; data = ""; },
  { key = "meta-v"; id = "previous_window"; data = ""; },
  { key = "meta-w"; id = "next_window"; data = ""; }
);

windows = { 1 = { immortal = "yes"; name = "(status)"; level = "ALL"; }; };
mainwindows = { 1 = { first_line = "1"; lines = "52"; }; };

